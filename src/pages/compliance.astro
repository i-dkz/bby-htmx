---
import Layout from "../layouts/Layout.astro";
import ComplianceSidebar from "../components/ComplianceSidebar.astro";
import ComplianceColumn from "../components/ComplianceColumn.astro";
import { headers, inputs, formats, unCodes } from "../data/compliance";
import Spacer from "../components/Spacer.astro";
import { supabase } from "../lib/supabase";
import Spinner from "../components/ui/spinner.astro";

const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return redirect("/");
}

const { data, error } = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});

if (error) {
  cookies.delete("sb-access-token", {
    path: "/",
  });
  cookies.delete("sb-refresh-token", {
    path: "/",
  });

  return redirect("/");
}

const email = data?.user?.email;

let columns: number = 1;
let setupData;
if (Astro.request.method === "POST") {
  try {
    setupData = await Astro.request.formData();
    columns = Number(setupData.get("columns"));
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---

<!-- unfortunately the cdn must be used for pdfjs as far as i can tell as it does not work very well on serverless as a dependency -->
<script
  src="https://unpkg.com/pdfjs-dist@4.0.379/build/pdf.min.mjs"
  type="module"></script>

 <!-- Parses uploaded MSDS PDF files using pdf.js to extract text.  Sends text
to /api/gpt endpoint to extract battery details. * Populates dropdown with MSDS
filenames.  Autofills battery details when MSDS is selected.  -->
<script type="module">
  const { pdfjsLib } = globalThis;
  const msdsForm = document.getElementById("msdsForm");
  const spinner = document.getElementById("spinner"); // Get the spinner element

  spinner.setAttribute("x-show", "false");

  pdfjsLib.GlobalWorkerOptions.workerSrc =
    "https://unpkg.com/pdfjs-dist@4.0.379/build/pdf.worker.min.mjs";

  const forms = {};

  // event listener for when the user uploads MSDS files
  msdsForm?.addEventListener("submit", async (event) => {
    event.preventDefault(); // Prevent default form submission
    spinner.setAttribute("x-show", "true");

    const formData = new FormData(msdsForm);
    const files = formData.getAll("MSDS");

    // looping over all the files that the user uploaded
    for (const file of files) {
      forms[file.name] = [file.name];

      const pdfData = await file.arrayBuffer();
      const loadingTask = pdfjsLib.getDocument(pdfData);
      const pdf = await loadingTask.promise;

      let fullText = "";

      // Loop through each page to extract text
      for (let pageNumber = 1; pageNumber <= pdf.numPages; pageNumber++) {
        const page = await pdf.getPage(pageNumber);
        const textContent = await page.getTextContent();
        textContent.items.forEach((item) => {
          if ("str" in item) {
            fullText += item.str + " ";
          } else if ("textContent" in item) {
            fullText += item.textContent + " ";
          }
        });
      }

      // send the file to GPT to extract watt hours, net weight and battery type
      const response = await fetch("/api/gpt", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ fullText }), // Send the fullText string in the request body
      });

      // Check if the request was successful
      if (response.ok) {
        const result = await response.json();
        forms[file.name]["batteryType"] = result.batteryType;
        forms[file.name]["wattHours"] = result.wattHours;
        forms[file.name]["totalMassKg"] = result.totalMassKg;
      } else {
        console.error("Error:", response.status);
      }
    }

    for (let i = 0; i <= 50; i++) {
      const inputId = `MSDS-${i}`; // Construct the input ID dynamically
      if (document.getElementById(inputId)) {
        const msds = document.getElementById(inputId);

        msds.innerHTML = "<option>Select MSDS</option>";

        Object.entries(forms).map(([key, val]) => {
          msds.innerHTML += `<option value=${key}>${key}</option>`;
        });
        // this event listener is for when the user selects one of the MSDS forms from the dropdown menu,
        // it will autofill the BATTERY_TYPE, WATT_HOURS and BATTERY_WEIGHT inputs with the response data from GPT
        msds.addEventListener("change", (event) => {
          const selection = event.target.value;
          const battType = document.getElementById(`BATTERY_TYPE-${i}`);
          const wattHours = document.getElementById(`WATT_HOURS-${i}`);
          const netWeight = document.getElementById(`BATTERY_WEIGHT-${i}`);
          battType.value =
            forms[selection]["batteryType"] === "Lithium Ion" ||
            forms[selection]["batteryType"] === "Li-ion Polymer"
              ? "Lithium-Ion"
              : null;
          wattHours.value = forms[selection]["wattHours"];
          netWeight.value = forms[selection]["totalMassKg"];
        });
      } else {
        break;
      }
    }

    msdsForm.reset();
    spinner.setAttribute("x-show", "false");
  });

  // looping through however many columns there are
</script>

<Layout>
  <nav
    class="flex h-12 w-full border-b items-center px-2 justify-between fixed top-20 bg-background z-40"
  >
    <div class="flex gap-2">
      <form
        x-data="{ fileSelected: false }"
        action=""
        name="msdsForm"
        id="msdsForm"
        class="flex w-auto"
        enctype="multipart/form-data"
        method="POST"
      >
        <input
          name="MSDS"
          id="MSDS"
          type="file"
          accept=".pdf"
          @change="fileSelected = $event.target.files.length > 0"
          multiple
        />
        <div class="relative w-24">
          <button class="btn text-xs" type="submit" :disabled="!fileSelected"
            >Upload</button
          >
          <Spinner top="0" right="0" show="true"/>
        </div>
      </form>
    </div>
    <button class="btn text-xs" type="submit" form="complianceForm"
      >Submit</button
    >
  </nav>
  <Spacer height={12} />
  <div class="flex w-[10000px]">
    <ComplianceSidebar obj={headers} />

    <ComplianceColumn
      columns={columns}
      obj={inputs}
      formName="complianceForm"
      setupData={setupData}
      email={email}
    />
  </div>
</Layout>
