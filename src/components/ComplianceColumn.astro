---
import { formats, unCodes } from "../data/compliance";

interface inputObj {
  name: string;
  type:
    | "text"
    | "password"
    | "number"
    | "checkbox"
    | "radio"
    | "select"
    | "file"
    | "date";
  maxLen: number;
  minLen: number;
  step: number;
  required: boolean;
  min: number;
  max: number;
  options: object;
}

const today = new Date().toISOString().split("T")[0];


let { obj, columns, formName,  setupData } = Astro.props;
---

<script src="../scripts/batteryInputs.ts"></script>

<!-- Compliance column. For every SKU there is one column of inputs -->
<form id={formName} class="flex" action="/api/email" method="POST" >
  {
    Array.from({ length: columns }).map((_, index) => (
      <div class="w-40 border-r">
        <div class="h-4 border-b text-xs text-center font-bold">
          SKU {index + 1}
        </div>
        <div class="h-4 border-b text-xs text-center font-bold overflow-none">
          {setupData.get(`UPC-${index}`)}
        </div>
        <div class="h-4 border-b text-xs text-center font-bold overflow-hidden">
          {setupData.get(`SHORT_DESC-${index}`)}
        </div>
        {obj.map((item: inputObj) => (
          <div
            class="flex border-b h-10 justify-center items-center text-sm"
            x-data="{battType: ''}"
          >

            {item.type === "text" && (
              <input
                class="w-[80%] border bg-background h-6 text-sm"
                name={item.name + `-${index}`}
                id={item.name + `-${index}`}
                type={item.type}
                minlength={item.minLen}
                maxlength={item.maxLen}
                required={item.required}

              />
            )}
            {item.type === "number" && (
              <input
                class="w-[80%] border bg-background h-6 text-sm"
                name={item.name + `-${index}`}
                id={item.name + `-${index}`}
                type={item.type}
                step={item.step}
                min={item.min}
                max={item.max}

                required={item.required}
              />
            )}
            {item.type === "select" && item.options === formats && (
              <select
                name={item.name + `-${index}`}
                id={item.name + `-${index}`}
                class="w-[80%] border bg-background h-6 text-sm"
                required={item.required}

              >
                <option />
              </select>
            )}
            {item.type === "select" && item.options === unCodes && (
              <select
                name={item.name + `-${index}`}
                id={item.name + `-${index}`}
                class="w-[80%] border bg-background h-6 text-sm"
                required={item.required}

              >
                <option />
              </select>
            )}
            {item.type === "select" &&
              item.options != formats &&
              item.options != unCodes && (
                <select
                  name={item.name + `-${index}`}
                  id={item.name + `-${index}`}
                  class="w-[80%] border bg-background h-6 text-sm"
                  required={item.required}
 
                >
                  <option />
                  {Object.entries(item.options).map(([key, val]) => (
                    <option value={key}>{val}</option>
                  ))}
                </select>
              )}
            {item.type === "date" && (
              <input
                class="w-[80%] border bg-background h-6 text-sm text-primary"
                type="date"
                min={today}
                class="z-1"
                name={item.name + `-${index}`}
                id={item.name + `-${index}`}
                required={item.required}
                pattern="\d{4}-\d{2}-\d{2}"
  
              />
            )}
          </div>
        ))}
      </div>
    ))
  }
</form>
