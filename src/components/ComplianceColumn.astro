---
import { formats, unCodes } from "../data/compliance";

interface inputObj {
  name: string;
  type:
    | "text"
    | "password"
    | "number"
    | "checkbox"
    | "radio"
    | "select"
    | "file"
    | "date";
  maxLen: number;
  minLen: number;
  step: number;
  required: boolean;
  min: number;
  max: number;
  options: object;
}

const today = new Date().toISOString().split("T")[0];

let { obj, columns, formName, data, setupData } = Astro.props;
---

<script>
  import { formats, unCodes } from "../data/compliance";

  // Function to handle input change for dynamic elements
  function handleInputChange(event: Event) {
    const value = (event.target as HTMLInputElement).value;
    const formatId = (event.target as HTMLInputElement).id.replace(
      "BATTERY_TYPE",
      "SIZE_FORMAT"
    );
    const hazmatId = (event.target as HTMLInputElement).id.replace(
      "BATTERY_TYPE",
      "HAZMAT_ID"
    );
    const format = document.getElementById(formatId) as HTMLSelectElement;
    const hazmat = document.getElementById(hazmatId) as HTMLSelectElement;
    format.innerHTML = `<option />`;
    formats[value].forEach((item: string) => {
      format.innerHTML += `<option value='${item}'>${item}</option>`;
    });

    hazmat.innerHTML = `<option />`;
    unCodes[value].forEach((item: string) => {
      hazmat.innerHTML += `<option value='${item}'>${item}</option>`;
    });
    // Add any additional actions you want to perform when the value changes
  }

  // Add event listeners to all elements with IDs starting with "BATTERY_TYPE-"
  document.addEventListener("DOMContentLoaded", function () {
    const batteryTypeInputs = document.querySelectorAll<HTMLInputElement>(
      '[id^="BATTERY_TYPE-"]'
    );
    batteryTypeInputs.forEach((input) => {
      input.addEventListener("input", handleInputChange);
    });
  });
</script>
<!-- Setup column. For every SKU there is one column of inputs -->
<form id={formName} class="flex" action="/compliance" method="post">
  {
    Array.from({ length: columns }).map((_, index) => (
      <div class="w-40 border-r">
        <div class="h-4 border-b text-xs text-center font-bold">
          SKU {index + 1}
        </div>
        <div class="h-4 border-b text-xs text-center font-bold">
          {setupData.get(`UPC-${index}`)}
        </div>
        <div class="h-4 border-b text-xs text-center font-bold">
          {setupData.get(`SKU_DESC-${index}`)}
        </div>
        {obj.map((item: inputObj) => (
          <div
            class="flex border-b h-16 justify-center items-center text-sm"
            x-data="{battType: ''}"
          >
            {item.type === "file" && (
              <input
                class="w-[80%] bg-background h-8 text-sm"
                name={item.name + `-${index}`}
                id={item.name + `-${index}`}
                type={item.type}
                minlength={item.minLen}
                maxlength={item.maxLen}
                required={item.required}
                value={
                  data && data[index]
                    ? data[index][item.name.split("-")[0]]
                    : ""
                }
              />
            )}
            {item.type === "text" && (
              <input
                class="w-[80%] border bg-background h-6 text-sm"
                name={item.name + `-${index}`}
                id={item.name + `-${index}`}
                type={item.type}
                minlength={item.minLen}
                maxlength={item.maxLen}
                required={item.required}
                value={
                  data && data[index]
                    ? data[index][item.name.split("-")[0]]
                    : ""
                }
              />
            )}
            {item.type === "number" && (
              <input
                class="w-[80%] border bg-background h-6 text-sm"
                name={item.name + `-${index}`}
                id={item.name + `-${index}`}
                type={item.type}
                step={item.step}
                min={item.min}
                max={item.max}
                value={
                  data && data[index]
                    ? data[index][item.name.split("-")[0]]
                    : ""
                }
                required={item.required}
              />
            )}
            {item.type === "select" && item.options === formats && (
              <select
                name={item.name + `-${index}`}
                id={item.name + `-${index}`}
                class="w-[80%] border bg-background h-6 text-sm"
                required={item.required}
                value={
                  data && data[index]
                    ? data[index][item.name.split("-")[0]]
                    : ""
                }
              >
                <option />
              </select>
            )}
            {item.type === "select" && item.options === unCodes && (
              <select
                name={item.name + `-${index}`}
                id={item.name + `-${index}`}
                class="w-[80%] border bg-background h-6 text-sm"
                required={item.required}
                value={
                  data && data[index]
                    ? data[index][item.name.split("-")[0]]
                    : ""
                }
              >
                <option />
              </select>
            )}
            {item.type === "select" &&
              item.options != formats &&
              item.options != unCodes && (
                <select
                  name={item.name + `-${index}`}
                  id={item.name + `-${index}`}
                  class="w-[80%] border bg-background h-6 text-sm"
                  required={item.required}
                  value={
                    data && data[index]
                      ? data[index][item.name.split("-")[0]]
                      : ""
                  }
                >
                  <option />
                  {Object.entries(item.options).map(([key, val]) => (
                    <option value={key}>{val}</option>
                  ))}
                </select>
              )}
            {item.type === "date" && (
              <input
                class="w-[80%] border bg-background h-6 text-sm text-primary"
                type="date"
                min={today}
                class="z-1"
                name={item.name + `-${index}`}
                id={item.name + `-${index}`}
                required={item.required}
                pattern="\d{4}-\d{2}-\d{2}"
                value={
                  data && data[index]
                    ? data[index][item.name.split("-")[0]]
                    : ""
                }
              />
            )}
          </div>
        ))}
      </div>
    ))
  }
</form>
